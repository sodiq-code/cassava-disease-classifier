import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Image,
  TouchableOpacity,
  Dimensions,
  Share,
  Alert,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';

import ActionButton from '../components/ActionButton';
import { COLORS, DISEASE_INFO } from '../constants/diseaseData';

const { width } = Dimensions.get('window');
const imageSize = (width - 48) / 2; // Two images per row with padding

const BatchResultScreen = ({ navigation, route }) => {
  const { batchResult } = route.params;
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);

  const selectedResult = batchResult.results[selectedImageIndex];
  const selectedImageUri = batchResult.imageUris[selectedImageIndex];

  const shareResults = async () => {
    try {
      const summary = generateResultsSummary();
      await Share.share({
        message: summary,
        title: 'CassavaDoc Batch Analysis Results',
      });
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    } catch (error) {
      Alert.alert('Error', 'Failed to share results');
    }
  };

  const generateResultsSummary = () => {
    const timestamp = new Date(batchResult.timestamp).toLocaleString();
    const successfulResults = batchResult.results.filter(r => !r.error);
    const errorResults = batchResult.results.filter(r => r.error);
    
    let summary = `üåø CassavaDoc Batch Analysis Results\n`;
    summary += `üìÖ Date: ${timestamp}\n`;
    summary += `üñºÔ∏è Total Images: ${batchResult.totalImages}\n`;
    summary += `‚úÖ Successful: ${successfulResults.length}\n`;
    summary += `‚ùå Failed: ${errorResults.length}\n`;
    summary += `üåê Mode: ${batchResult.isFromAPI ? 'Online (API)' : 'Offline (Local)'}\n\n`;

    summary += `üìä Results Summary:\n`;
    successfulResults.forEach((result, index) => {
      summary += `${index + 1}. ${result.class_name} (${result.confidence.toFixed(1)}%)\n`;
    });

    if (errorResults.length > 0) {
      summary += `\n‚ö†Ô∏è Failed Images:\n`;
      errorResults.forEach((result, index) => {
        summary += `${index + 1}. Error: ${result.error}\n`;
      });
    }

    summary += `\nüåø Generated by CassavaDoc Mobile App`;
    return summary;
  };

  const getResultStats = () => {
    const successful = batchResult.results.filter(r => !r.error);
    const diseaseCount = {};
    
    successful.forEach(result => {
      const disease = result.class_name;
      diseaseCount[disease] = (diseaseCount[disease] || 0) + 1;
    });

    return { successful: successful.length, diseaseCount };
  };

  const stats = getResultStats();

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        {/* Header */}
        <View style={styles.header}>
          <LinearGradient
            colors={[COLORS.primary, COLORS.secondary]}
            style={styles.headerGradient}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
          >
            <Text style={styles.headerTitle}>Batch Analysis Results</Text>
            <Text style={styles.headerSubtitle}>
              {batchResult.totalImages} images analyzed ‚Ä¢ {stats.successful} successful
            </Text>
          </LinearGradient>
        </View>

        {/* Stats Overview */}
        <View style={styles.statsSection}>
          <Text style={styles.sectionTitle}>üìä Analysis Summary</Text>
          <View style={styles.statsGrid}>
            <View style={styles.statItem}>
              <Text style={styles.statNumber}>{batchResult.totalImages}</Text>
              <Text style={styles.statLabel}>Total Images</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statNumber}>{stats.successful}</Text>
              <Text style={styles.statLabel}>Successful</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statNumber}>{batchResult.totalImages - stats.successful}</Text>
              <Text style={styles.statLabel}>Failed</Text>
            </View>
          </View>

          {/* Disease Distribution */}
          {Object.keys(stats.diseaseCount).length > 0 && (
            <View style={styles.diseaseDistribution}>
              <Text style={styles.distributionTitle}>Disease Distribution</Text>
              {Object.entries(stats.diseaseCount).map(([disease, count]) => {
                const diseaseInfo = DISEASE_INFO[disease];
                return (
                  <View key={disease} style={styles.diseaseItem}>
                    <Text style={styles.diseaseIcon}>{diseaseInfo?.icon || 'üåø'}</Text>
                    <Text style={styles.diseaseName}>{disease}</Text>
                    <View style={styles.diseaseCount}>
                      <Text style={styles.diseaseCountText}>{count}</Text>
                    </View>
                  </View>
                );
              })}
            </View>
          )}
        </View>

        {/* Image Grid */}
        <View style={styles.imageSection}>
          <Text style={styles.sectionTitle}>üñºÔ∏è All Images</Text>
          <Text style={styles.sectionSubtitle}>Tap any image to view detailed results</Text>
          
          <View style={styles.imageGrid}>
            {batchResult.imageUris.map((imageUri, index) => {
              const result = batchResult.results[index];
              const isSelected = selectedImageIndex === index;
              const hasError = result.error;
              
              return (
                <TouchableOpacity
                  key={index}
                  style={[
                    styles.imageGridItem,
                    isSelected && styles.selectedImageItem,
                    hasError && styles.errorImageItem
                  ]}
                  onPress={() => {
                    setSelectedImageIndex(index);
                    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
                  }}
                >
                  <Image source={{ uri: imageUri }} style={styles.gridImage} />
                  <View style={styles.imageOverlay}>
                    <Text style={styles.imageNumber}>{index + 1}</Text>
                    {hasError ? (
                      <Ionicons name="alert-circle" size={16} color="#dc2626" />
                    ) : (
                      <Ionicons name="checkmark-circle" size={16} color="#16a34a" />
                    )}
                  </View>
                  {!hasError && (
                    <View style={styles.confidenceBadge}>
                      <Text style={styles.confidenceText}>
                        {result.confidence.toFixed(0)}%
                      </Text>
                    </View>
                  )}
                </TouchableOpacity>
              );
            })}
          </View>
        </View>

        {/* Selected Image Details */}
        <View style={styles.detailSection}>
          <Text style={styles.sectionTitle}>
            üîç Image {selectedImageIndex + 1} Details
          </Text>
          
          <View style={styles.selectedImageContainer}>
            <Image source={{ uri: selectedImageUri }} style={styles.selectedImage} />
            
            <View style={styles.resultDetails}>
              {selectedResult.error ? (
                <View style={styles.errorResult}>
                  <Ionicons name="alert-circle" size={32} color="#dc2626" />
                  <Text style={styles.errorTitle}>Analysis Failed</Text>
                  <Text style={styles.errorMessage}>{selectedResult.error}</Text>
                </View>
              ) : (
                <View style={styles.successResult}>
                  <View style={styles.diseaseHeader}>
                    <Text style={styles.diseaseIconLarge}>
                      {DISEASE_INFO[selectedResult.class_name]?.icon || 'üåø'}
                    </Text>
                    <View style={styles.diseaseInfo}>
                      <Text style={styles.diseaseTitleLarge}>{selectedResult.class_name}</Text>
                      <View 
                        style={[
                          styles.confidenceBadgeLarge,
                          { backgroundColor: `${DISEASE_INFO[selectedResult.class_name]?.color || COLORS.primary}20` }
                        ]}
                      >
                        <Text 
                          style={[
                            styles.confidenceTextLarge,
                            { color: DISEASE_INFO[selectedResult.class_name]?.color || COLORS.primary }
                          ]}
                        >
                          {selectedResult.confidence.toFixed(1)}% confidence
                        </Text>
                      </View>
                    </View>
                  </View>

                  <View style={styles.infoGrid}>
                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>Severity</Text>
                      <Text 
                        style={[
                          styles.severityBadge,
                          { 
                            backgroundColor: `${DISEASE_INFO[selectedResult.class_name]?.color || COLORS.primary}20`,
                            color: DISEASE_INFO[selectedResult.class_name]?.color || COLORS.primary
                          }
                        ]}
                      >
                        {DISEASE_INFO[selectedResult.class_name]?.severity || 'Unknown'}
                      </Text>
                    </View>

                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>Description</Text>
                      <Text style={styles.infoText}>
                        {DISEASE_INFO[selectedResult.class_name]?.description || 'No description available'}
                      </Text>
                    </View>

                    <View style={styles.infoItem}>
                      <Text style={styles.infoLabel}>Treatment</Text>
                      <Text style={styles.infoText}>
                        {DISEASE_INFO[selectedResult.class_name]?.treatment || 'Consult agricultural expert'}
                      </Text>
                    </View>
                  </View>
                </View>
              )}
            </View>
          </View>
        </View>

        {/* Analysis Info */}
        <View style={styles.analysisInfo}>
          <View style={styles.infoRow}>
            <Text style={styles.infoRowLabel}>Analysis Date</Text>
            <Text style={styles.infoRowValue}>
              {new Date(batchResult.timestamp).toLocaleString()}
            </Text>
          </View>
          <View style={styles.infoRow}>
            <Text style={styles.infoRowLabel}>Analysis Mode</Text>
            <Text style={[
              styles.infoRowValue,
              { color: batchResult.isFromAPI ? COLORS.success : COLORS.warning }
            ]}>
              {batchResult.isFromAPI ? 'üåê Online (API)' : 'üì± Offline (Local)'}
            </Text>
          </View>
        </View>

        {/* Action Buttons */}
        <View style={styles.actionSection}>
          <ActionButton
            title="Share Results"
            icon="üì§"
            onPress={shareResults}
            style={styles.actionButton}
          />
          
          <ActionButton
            title="Analyze More Images"
            icon="üì∑"
            onPress={() => navigation.navigate('Home')}
            variant="secondary"
            style={styles.actionButton}
          />
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  scrollContainer: {
    padding: 16,
  },
  header: {
    marginBottom: 24,
  },
  headerGradient: {
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: '800',
    color: '#ffffff',
    textAlign: 'center',
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.9)',
    textAlign: 'center',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: COLORS.text,
    marginBottom: 12,
  },
  sectionSubtitle: {
    fontSize: 14,
    color: COLORS.textSecondary,
    marginBottom: 16,
  },
  statsSection: {
    backgroundColor: COLORS.surface,
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 16,
  },
  statItem: {
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 28,
    fontWeight: '800',
    color: COLORS.primary,
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: COLORS.textSecondary,
    textAlign: 'center',
  },
  diseaseDistribution: {
    borderTopWidth: 1,
    borderTopColor: COLORS.border,
    paddingTop: 16,
  },
  distributionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.text,
    marginBottom: 12,
  },
  diseaseItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    backgroundColor: COLORS.background,
    borderRadius: 8,
    marginBottom: 8,
  },
  diseaseIcon: {
    fontSize: 20,
    marginRight: 12,
  },
  diseaseName: {
    flex: 1,
    fontSize: 14,
    color: COLORS.text,
    fontWeight: '500',
  },
  diseaseCount: {
    backgroundColor: COLORS.primary,
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
    minWidth: 24,
    alignItems: 'center',
  },
  diseaseCountText: {
    color: '#ffffff',
    fontSize: 12,
    fontWeight: '600',
  },
  imageSection: {
    marginBottom: 24,
  },
  imageGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  imageGridItem: {
    width: imageSize,
    height: imageSize,
    borderRadius: 12,
    marginBottom: 12,
    position: 'relative',
    overflow: 'hidden',
    borderWidth: 2,
    borderColor: 'transparent',
  },
  selectedImageItem: {
    borderColor: COLORS.primary,
  },
  errorImageItem: {
    borderColor: '#dc2626',
  },
  gridImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  imageOverlay: {
    position: 'absolute',
    top: 8,
    left: 8,
    right: 8,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  imageNumber: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    color: '#ffffff',
    fontSize: 12,
    fontWeight: '600',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  confidenceBadge: {
    position: 'absolute',
    bottom: 8,
    right: 8,
    backgroundColor: 'rgba(22, 163, 74, 0.9)',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 8,
  },
  confidenceText: {
    color: '#ffffff',
    fontSize: 10,
    fontWeight: '600',
  },
  detailSection: {
    backgroundColor: COLORS.surface,
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  selectedImageContainer: {
    alignItems: 'center',
  },
  selectedImage: {
    width: width * 0.6,
    height: width * 0.6,
    borderRadius: 12,
    marginBottom: 16,
    borderWidth: 2,
    borderColor: COLORS.primary,
  },
  resultDetails: {
    width: '100%',
  },
  errorResult: {
    alignItems: 'center',
    padding: 20,
  },
  errorTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#dc2626',
    marginTop: 8,
    marginBottom: 4,
  },
  errorMessage: {
    fontSize: 14,
    color: COLORS.textSecondary,
    textAlign: 'center',
    lineHeight: 20,
  },
  successResult: {
    width: '100%',
  },
  diseaseHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  diseaseIconLarge: {
    fontSize: 40,
    marginRight: 16,
  },
  diseaseInfo: {
    flex: 1,
  },
  diseaseTitleLarge: {
    fontSize: 18,
    fontWeight: '700',
    color: COLORS.text,
    marginBottom: 8,
  },
  confidenceBadgeLarge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    alignSelf: 'flex-start',
  },
  confidenceTextLarge: {
    fontSize: 14,
    fontWeight: '600',
  },
  infoGrid: {
    gap: 12,
  },
  infoItem: {
    backgroundColor: COLORS.background,
    borderRadius: 8,
    padding: 12,
  },
  infoLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: COLORS.primary,
    textTransform: 'uppercase',
    marginBottom: 6,
  },
  infoText: {
    fontSize: 14,
    color: COLORS.text,
    lineHeight: 20,
  },
  severityBadge: {
    fontSize: 14,
    fontWeight: '600',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
    alignSelf: 'flex-start',
  },
  analysisInfo: {
    backgroundColor: COLORS.surface,
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  infoRowLabel: {
    fontSize: 14,
    color: COLORS.textSecondary,
    fontWeight: '500',
  },
  infoRowValue: {
    fontSize: 14,
    color: COLORS.text,
    fontWeight: '600',
    textAlign: 'right',
    flex: 1,
    marginLeft: 16,
  },
  actionSection: {
    gap: 12,
  },
  actionButton: {
    marginBottom: 0,
  },
});

export default BatchResultScreen;